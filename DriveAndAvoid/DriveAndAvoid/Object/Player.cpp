#include "Player.h"
#include "../Utility/InputControl.h"
#include "DxLib.h"


Player::Player() :is_active(false), image(NULL), location(0.0f), box_size(0.0f),invincible(0),reviv(0),
angle(0.0f),
						speed(0.0f), barrier_count(0),life(0),
barrier(nullptr)
{
	
}


Player::~Player()
{
	
}


//初期化処理
void Player::Initialize()
{


	is_active = true;
	location = Vector2D(250.0f, 480.0f / 5.0f * 4);
	box_size = Vector2D(31.0f, 30.0f);
	angle = 0.0f;
	speed = 7.0f;//プレイヤーの速度デフォルト5
	barrier_count = 3;
	life = 3;

	//画像の読み込み
	image = LoadGraph("Resource/images/player.png");

	//エラーチェック
	if (image == -1)
	{
		throw("Resource/images/player.pngがありません\n");
	}


	//SEの読み込み
	sound_effect[0] = LoadSoundMem("Resource/sounds/SE_player_move.ogg");
	sound_effect[1] = LoadSoundMem("Resource/sounds/SE_player_avoid.ogg");
	sound_effect[2] = LoadSoundMem("Resource/sounds/SE_player_hit.ogg");
	sound_effect[3] = LoadSoundMem("Resource/sounds/SE_player_break.ogg");

	//エラーチェック
	for (int i = 0; i < 4; i++)
	{
		if (sound_effect[i]==-1)
		{
			throw("Resource/sounds/SE_player[%d]が見つかりません", i);
		}
	}
	//if (sound_effect[0] == -1)
	//{
	//	throw("Resource/sounds/SE_player_move.oggが無いよぅ");
	//}

	////エラーチェック
	//if (sound_effect[1] == -1)
	//{
	//	throw("Resource/sounds/SE_player_avoid.oggが無いよぅ");
	//}

	////エラーチェック
	//if (sound_effect[2] == -1)
	//{
	//	throw("Resource/sounds/SE_player_hit.oggが無いよぉ");
	//}

	////エラーチェック
	//if (sound_effect[3] == -1)
	//{
	//	throw("Resource/sounds/SE_player_break.oggが無いよぃ");
	//}

	//音量の調整
	for (int i = 0; i < 4; i++)
	{
		ChangeVolumeSoundMem(200, sound_effect[i]);
	}
	/*ChangeVolumeSoundMem(200, sound_effect[0]);
	ChangeVolumeSoundMem(200, sound_effect[1]);
	ChangeVolumeSoundMem(200, sound_effect[2]);
	ChangeVolumeSoundMem(200, sound_effect[3]);*/
}


//更新処理
void Player::Update()
{
	//操作不可状態
	if (!is_active)
	{
		angle += DX_PI_F / 24.0f;
		//speed = 1.0f;
		if (angle >= DX_PI_F * 4.0f)
		{
			is_active = true;
		}
		return;

		//敵にぶつかったときの処理
		if (barrier == nullptr)
		{
			barrier = new Barrier;
			invincible = 0;
			reviv = 30;
			PlaySoundMem(sound_effect[2], DX_PLAYTYPE_BACK, TRUE);
			PlaySoundMem(sound_effect[3], DX_PLAYTYPE_BACK, TRUE);
		}
	}


	//移動処理
	Movement();

	if (CheckSoundMem(sound_effect[0]) == 0)
	{
		PlaySoundMem(sound_effect[0], DX_PLAYTYPE_BACK, TRUE);
	}

	//バリア処理
	if (InputControl::GetButtonDown(XINPUT_BUTTON_B) && barrier_count > 0)
	{
		if (barrier == nullptr)
		{
			barrier_count--;
			barrier = new Barrier;
		}
	}

	//バリアが生成されていたら、更新を行う
	if (barrier != nullptr)
	{
		invincible++;
		//バリア時間が経過したか？していたら、削除する
		if (barrier->IsFinished(this->speed))
		{
			delete barrier;
			barrier = nullptr;
			is_active = true;
			invincible == 0;
			reviv = 30;
		}
	}
}


//描画処理
void Player::Draw()
{ // プレイヤー画像の描画
	if (barrier != nullptr)
	{
		if (invincible < reviv / 2)
		{
			// プレイヤーを描画する
			DrawRotaGraphF(location.x, location.y, 1.0f, angle, image, TRUE);
			invincible++;
		}
		else
		{
			// プレイヤーが無敵でない場合は、通常通り描画する必要があります
			// ここでプレイヤーを描画する必要があります
			DrawRotaGraphF(location.x, location.y, 1.0f, angle, image, TRUE);
		}
		if (invincible > reviv)
		{
			invincible = 0;
			reviv -= 4;
		}
	}
	else
	{
		// プレイヤーを通常通り描画します
		DrawRotaGraphF(location.x, location.y, 1.0f, angle, image, TRUE);
	}

	//UI画像色
	DrawBox(500, 0, 640, 480, GetColor(255, 255, 255), TRUE);

	//残機UI
	 DrawGraph(530, 150, image, TRUE);
	 SetFontSize(25);
	DrawFormatString(595, 230, GetColor(0, 255, 0), "×%d", life);



	// バリアが生成されていたら、描画を行う
	if (barrier != nullptr)
	{
		barrier->Draw(this->location);
	}

}


//終了時処理
void Player::Finalize()
{
	//読み込んだ画像を削除
	DeleteGraph(image);

	//バリアが生成されていたら、削除する
	if (barrier != nullptr)
	{
		delete barrier;
	}

}


//状態設定処理
void Player::SetActive(bool flg)
{
	this->is_active = flg;
}


void Player::DecLife()
{
	life--;
}

//位置情報取得処理
Vector2D Player::GetLocation()const
{
	return this->location;
}


//当たり判定の大きさ取得処理
Vector2D Player::GetBoxSize()const
{
	return this->box_size;
}


//速さ取得処理
float Player::GetSpeed()const
{
	return this->speed;
}


//バリア枚数取得処理
int Player::GetBarrierCount()const
{
	return this->barrier_count;
}


//残機取得処理
int Player::GetLife()const
{
	return life;
}


//バリアが有効か？を取得
bool Player::IsBarrier()const
{
	return (barrier != nullptr);
}


//移動処理
void Player::Movement()
{
	Vector2D move = Vector2D(0.0f);
	float MoveSizeX = 50;
	float MoveSizeY = 80;
	angle = 0.0f;

	//十字移動処理
	if (InputControl::GetButtonDown(XINPUT_BUTTON_DPAD_LEFT))
	{
		move += Vector2D(-MoveSizeX, 0.0f);
		angle = -DX_PI_F / 18;
		PlaySoundMem(sound_effect[1], DX_PLAYTYPE_BACK,TRUE);
	}
	else if (InputControl::GetButtonDown(XINPUT_BUTTON_DPAD_RIGHT))
	{
		move += Vector2D(MoveSizeX, 0.0f);
		angle = DX_PI_F / 18;
		PlaySoundMem(sound_effect[1], DX_PLAYTYPE_BACK, TRUE);
	}
	else if (InputControl::GetButtonDown(XINPUT_BUTTON_DPAD_UP))
	{
		move += Vector2D(0.0f, -MoveSizeY);
	}
	else if (InputControl::GetButtonDown(XINPUT_BUTTON_DPAD_DOWN))
	{
		move += Vector2D(0.0f, MoveSizeY);
	}

	// プレイヤーキャラクターの位置を更新する
	location += move;

	//画面外に行かないように制限する
	if ((location.x < box_size.x) || (location.x >= 640.f - 160.0f) ||
		(location.y < box_size.y) || (location.y >= 480.0f - box_size.y))
	{
		location -= move;
	}
}


